name: Upload Website

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository.
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configure AWS credentials.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Change if your bucket is in another region

      # 3. Generate a manifest (list of files and their MD5 hashes) for the current code.
      - name: Generate current manifest
        run: |
          # Remove any previous manifest files
          rm -f manifest.txt
          # Find all files except those in .git, strongdog2, and strongdog3 directories,
          # then compute their MD5 hashes and sort the output.
          #
          # The find command explanation:
          #   -type f: only files
          #   \( -path "./.git/*" -o -path "./strongdog2/*" -o -path "./strongdog3/*" \) -prune
          #     => skip any files in those directories
          #   -o -type f -print => print the remaining files
          #
          # Then we compute md5sum for each file and sort the results.
          find . \( -path "./.git/*" -o -path "./strongdog2/*" -o -path "./strongdog3/*" \) -prune -o -type f -print | \
            while read -r file; do md5sum "$file"; done | sort > manifest.txt
          echo "Current manifest generated:"
          cat manifest.txt

      # 4. Download the previous manifest from S3 (if it exists).
      - name: Download previous manifest
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          if aws s3 cp s3://$AWS_S3_BUCKET/manifest.txt previous-manifest.txt; then
            echo "Previous manifest downloaded:"
            cat previous-manifest.txt
          else
            echo "No previous manifest found; treating all files as new."
            # Create an empty previous manifest file so the comparison works.
            touch previous-manifest.txt
          fi

      # 5. Compare manifests and produce a list of files that are new or changed.
      - name: Determine changed files
        id: changed-files
        run: |
          # We will build a list of files whose MD5 sum differs from the previous manifest.
          CHANGED_FILES=()
          while read -r current_line; do
            # current_line: "md5sum  ./path/to/file"
            current_md5=$(echo "$current_line" | awk '{print $1}')
            file=$(echo "$current_line" | awk '{print $2}')
            # Try to find the same file in the previous manifest.
            prev_line=$(grep -F " $file" previous-manifest.txt || true)
            if [ -z "$prev_line" ]; then
              echo "New file detected: $file"
              CHANGED_FILES+=("$file")
            else
              prev_md5=$(echo "$prev_line" | awk '{print $1}')
              if [ "$current_md5" != "$prev_md5" ]; then
                echo "Changed file detected: $file"
                CHANGED_FILES+=("$file")
              fi
            fi
          done < manifest.txt

          # Report the files to be deployed.
          if [ ${#CHANGED_FILES[@]} -eq 0 ]; then
            echo "No files have changed."
          else
            echo "Files to deploy:"
            for f in "${CHANGED_FILES[@]}"; do
              echo "$f"
            done
          fi

          # Save the list as a space-separated string for the next step.
          files_list=$(printf "%s " "${CHANGED_FILES[@]}")
          echo "::set-output name=files::${files_list}"
      # Note: The set-output command is being deprecated.
      # In the future you might use workflow commands to write to $GITHUB_OUTPUT.

      # 6. Upload only the changed files to S3.
      - name: Upload changed files to S3
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          CHANGED_FILES="${{ steps.changed-files.outputs.files }}"
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changed files to upload."
          else
            for file in $CHANGED_FILES; do
              # Remove any leading "./" from the file path for S3 key consistency.
              s3_key=$(echo "$file" | sed 's|^\./||')
              echo "Uploading $file to s3://$AWS_S3_BUCKET/$s3_key"
              aws s3 cp "$file" "s3://$AWS_S3_BUCKET/$s3_key" --acl public-read --follow-symlinks
            done
          fi

      # 7. Upload the new manifest to S3 for future comparisons.
      - name: Upload new manifest to S3
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          echo "Uploading new manifest.txt to S3."
          aws s3 cp manifest.txt s3://$AWS_S3_BUCKET/manifest.txt
