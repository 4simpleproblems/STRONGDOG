<!DOCTYPE html>
<html>
  <head>
    <title>Loading... - StrongDog XP</title>
    <style>
      body {
        font-family: "Poppins", sans-serif;
        margin: 0;
        padding: 0;
        background-color: #2e2e2e;
        color: #e0e0e0;
      }

      .header {
        background-color: #3c3c3c;
        padding: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 3px solid #ff8c00;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
      }

      .header-logo {
        text-decoration: none;
        font-size: 36px;
        font-weight: bold;
        transition: color 0.3s;
      }

      .header-logo span:nth-child(1) {
        color: #ffffff;
      }

      .header-logo span:nth-child(2) {
        color: #ff8c00;
      }

      .header-logo:hover span:nth-child(1) {
        color: #e0e0e0;
      }

      .content {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 40px;
      }

      .ad {
        width: 120px;
        height: 300px;
        background-color: #4a4a4a;
        margin: 0 20px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
      }

      .game-container {
        flex-shrink: 0;
        width: 85%;
        height: 700px;
        margin: 20px auto;
        background-color: #3a3a3a;
        position: relative;
        overflow: hidden;
        border-radius: 20px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.7);
      }

      .game-container iframe {
        width: 100%;
        height: 100%;
        border: none;
        display: block;
        border-radius: 20px;
      }

      .game-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #3a3a3a;
        border-radius: 10px;
        padding: 20px;
        margin: 30px auto;
        width: 85%;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.7);
      }

      .fullscreen-button {
        padding: 10px 20px;
        background-color: #ff8c00;
        color: #fff;
        border: none;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s;
        font-weight: bold;
      }

      .fullscreen-button:hover {
        background-color: #ff6a00;
      }

      .cards-section {
        background-color: #3a3a3a;
        padding: 50px;
        text-align: center;
        border-radius: 20px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.7);
        margin: 40px;
      }

      .card-container {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 30px;
      }

      .card {
        display: block;
        width: 200px;
        text-align: center;
        background-color: #4a4a4a;
        border-radius: 15px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.8);
        overflow: hidden;
        text-decoration: none;
        color: #e0e0e0;
        transition: transform 0.3s, box-shadow 0.3s;
      }

      .card:hover {
        transform: translateY(-10px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 1);
      }

      .card img {
        width: 100%;
        height: 150px;
        object-fit: cover;
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
      }

      .card figcaption {
        padding: 15px;
        font-size: 16px;
        color: #ff8c00;
      }
    </style>
  </head>
  <body>
    <div class="header">
      <a href="./index.html" class="header-logo">
        <span>StrongDog</span>
        <span>XP</span>
      </a>
    </div>

    <div class="content">
      <div class="ad ad-left">
        <script
          async
          src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-1609993827735056"
          crossorigin="anonymous"
        ></script>
        <!-- in game ads -->
        <ins
          class="adsbygoogle"
          style="display: inline-block; width: 120px; height: 300px"
          data-ad-client="ca-pub-1609993827735056"
          data-ad-slot="3552085788"
        ></ins>
        <script>
          (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
      </div>
      <div class="game-container" id="gameContainer"></div>
      <div class="ad ad-right">
        <script
          async
          src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-1609993827735056"
          crossorigin="anonymous"
        ></script>
        <!-- in game ads -->
        <ins
          class="adsbygoogle"
          style="display: inline-block; width: 120px; height: 300px"
          data-ad-client="ca-pub-1609993827735056"
          data-ad-slot="3552085788"
        ></ins>
        <script>
          (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
      </div>
    </div>

    <div class="game-bar">
      <span id="gameTitle">Loading...</span>
      <span
        id="favoriteIcon"
        class="favorite-icon"
        style="cursor: pointer; font-size: 24px"
      >&#9734;</span>
      <button id="fullscreenButton" class="fullscreen-button">
        Fullscreen
      </button>
    </div>

    <div class="cards-section">
      <h2>Recommended Games</h2>
      <div class="card-container" id="cardContainer">
        <!-- Cards will be loaded here -->
      </div>
    </div>

    <script type="module">
      import games from "./cards-data.js";
      import { siteMapping } from "./site-mapping.js";

      document.addEventListener("DOMContentLoaded", async function () {
        const urlParams = new URLSearchParams(window.location.search);
        const gameId = urlParams.get("id");
        const gameContainer = document.getElementById("gameContainer");
        const gameTitleElement = document.getElementById("gameTitle");
        const favoriteIcon = document.getElementById("favoriteIcon");
        const fullscreenButton = document.getElementById("fullscreenButton");

        async function fileExists(url) {
          try {
            const response = await fetch(url, { method: "HEAD" });
            return response.ok;
          } catch {
            return false;
          }
        }

        function getCurrentKeyHostOnly() {
          const host = window.location.host;
          return host;
        }

        function getBaseURLForPage(page) {
          const currentKey = getCurrentKeyHostOnly();
          if (!page || page === 1) {
            return "./";
          }

          const arr = siteMapping[currentKey];
          if (!arr) {
            return "./";
          }
          const index = page - 2;
          if (arr[index]) {
            return arr[index];
          } else {
            return "./";
          }
        }

        function adjustHrefPath(path, page) {
          path = path.replace(/^\.\//, "").replace(/^\//, "");
          const baseURL = getBaseURLForPage(page);

          let finalPath;
          if (baseURL === "./") {
            finalPath = "./" + path;
          } else {
            if (!baseURL.endsWith("/")) {
              finalPath = baseURL + "/" + path;
            } else {
              finalPath = baseURL + path;
            }
          }
          return finalPath;
        }

        async function getEmbedPath(adjustedHref, originalHref, page) {
          let cleanHref = adjustedHref
            .replace(/index\.html$/, "")
            .replace(/base\.html$/, "")
            .replace(/\.html$/, "");
          if (!cleanHref.endsWith("/")) cleanHref += "/";

          // Paths to try in order:
          const pathsToTry = [
            cleanHref + "game/index.html",
            cleanHref + "game/base.html",
            cleanHref + "gamereal/index.html",
            cleanHref + "gamereal/base.html",
            cleanHref + "index.html",
            cleanHref + "base.html"
          ];

          for (const path of pathsToTry) {
            if (await fileExists(path)) {
              return path;
            }
          }

          // If no paths were found, fallback to adjusted original
          return adjustHrefPath(originalHref, page);
        }

        function embedGame(gamePath, title) {
          const iframe = document.createElement("iframe");
          iframe.src = gamePath;
          gameContainer.innerHTML = "";
          gameContainer.appendChild(iframe);
          gameTitleElement.textContent = title;
          document.title = title + " - StrongDog XP";
        }

        let selectedGame = null;
        if (gameId) {
          const idNum = parseInt(gameId, 10);
          selectedGame = games.find(g => g.id === idNum);
        }

        gameTitleElement.textContent = "Loading...";
        document.title = "Loading... - StrongDog XP";

        if (!selectedGame) {
          embedGame("./404.html", "Not Found");
        } else {
          const page = selectedGame.page;
          const baseURL = getBaseURLForPage(page);

          let adjustedHref = selectedGame.href.replace(/^\.\//, "");
          if (!baseURL.endsWith("/")) {
            adjustedHref = baseURL + "/" + adjustedHref;
          } else {
            adjustedHref = baseURL + adjustedHref;
          }

          const embedPath = await getEmbedPath(adjustedHref, selectedGame.href, page);
          embedGame(embedPath, selectedGame.name);

          function toggleFavorite() {
            let favorites = JSON.parse(localStorage.getItem("favorites") || "{}");
            const imagePath = "./img/" + selectedGame.name + ".jpg";

            if (favorites[selectedGame.name]) {
              delete favorites[selectedGame.name];
            } else {
              favorites[selectedGame.name] = {
                path: selectedGame.href,
                image: imagePath,
              };
            }

            localStorage.setItem("favorites", JSON.stringify(favorites));
            updateFavoriteIcon(favorites, selectedGame.name);
          }

          function updateFavoriteIcon(favorites, title) {
            if (favorites[title]) {
              favoriteIcon.innerHTML = "&#9733;";
            } else {
              favoriteIcon.innerHTML = "&#9734;";
            }
          }

          const favorites = JSON.parse(localStorage.getItem("favorites") || "{}");
          updateFavoriteIcon(favorites, selectedGame.name);

          favoriteIcon.addEventListener("click", function () {
            toggleFavorite();
          });

          fullscreenButton.addEventListener("click", function () {
            if (gameContainer.requestFullscreen) {
              gameContainer.requestFullscreen();
            } else if (gameContainer.webkitRequestFullscreen) {
              gameContainer.webkitRequestFullscreen();
            } else if (gameContainer.msRequestFullscreen) {
              gameContainer.msRequestFullscreen();
            }
          });

          window.onload = function () {
            fetch(
              "https://script.google.com/macros/s/AKfycbx1xYwL2QqkOQHyeCWIVSMVLP_XXts5zpb0M-vbvlRl1MpRYYcv4NI-i8OaGc0YP0wpsg/exec?title=" +
                encodeURIComponent(selectedGame ? selectedGame.name : "Not Found"),
              {
                method: "GET",
              }
            )
              .then((response) => response.text())
              .then((result) => console.log("[DEBUG] Google Script response:", result))
              .catch((error) => console.error("[DEBUG] Google Script error:", error));
          };

          const cardContainer = document.getElementById("cardContainer");

          function adjustImgPath(path, page) {
            path = path.replace(/^\.\//, "").replace(/^\//, "").replace(/^img\//, "");
            const baseURL = getBaseURLForPage(page);

            let finalImgPath;
            if (baseURL === "./") {
              finalImgPath = "./img/" + path;
            } else {
              if (!baseURL.endsWith("/")) {
                finalImgPath = baseURL + "/img/" + path;
              } else {
                finalImgPath = baseURL + "img/" + path;
              }
            }
            return finalImgPath;
          }

          const randomGames = games
            .slice()
            .sort(() => 0.5 - Math.random())
            .slice(0, 10);

          randomGames.forEach((game) => {
            const { href, imgSrc, name, page } = game;
            const adjustedHref = adjustHrefPath(href, page);
            const adjustedImgSrc = adjustImgPath(imgSrc, page);

            const card = document.createElement("a");
            card.className = "card";
            card.href = adjustedHref + `?id=${game.id}`;

            const img = document.createElement("img");
            img.src = adjustedImgSrc;
            img.alt = name;
            card.appendChild(img);

            const figcaption = document.createElement("figcaption");
            figcaption.textContent = name;
            card.appendChild(figcaption);

            cardContainer.appendChild(card);
          });
        }
      });
    </script>
  </body>
</html>
